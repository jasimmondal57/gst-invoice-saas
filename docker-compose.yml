version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gst-invoice-db
    environment:
      POSTGRES_USER: ${DB_USER:-invoiceuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-invoicepass123}
      POSTGRES_DB: ${DB_NAME:-gst_invoice_saas}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-invoiceuser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gst-invoice-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gst-invoice-api
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${DB_USER:-invoiceuser}:${DB_PASSWORD:-invoicepass123}@postgres:5432/${DB_NAME:-gst_invoice_saas}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      PORT: 5000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - gst-invoice-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gst-invoice-web
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:5000}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - gst-invoice-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: gst-invoice-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - gst-invoice-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  gst-invoice-network:
    driver: bridge

